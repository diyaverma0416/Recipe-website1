Diya2004v

in categories for export homepage u can render categories as thai food etc etc
<% if(categories is ''){
    %categoires .forEach(function(categoriry, index))
}

<% if(recipe != null ) { %>

  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item active" aria-current="page"><%- recipe.name %></li>
    </ol>
  </nav>


  <div class="row">

    <div class="col-12 col-md-4">
      <img src="/uploads/<%- recipe.image %>" class="img-fluid sticky-top" style="top: 20px;" alt="<%- recipe.name %>" loading="lazy">
    </div>

    <div class="col-12 col-md-8">
      <div class="row">
        <div class="col-12"><h1><%- recipe.name %></h1></div>
        <div class="col-12 mb-4"><i class="bi bi-tag"></i> <%- recipe.category %></div>
        <div class="col-12" style="white-space: pre-line;">
          <h4>Cooking Instructions</h4>
          <%- recipe.description %>
        </div>
      </div>

      <div class="row pt-4">
        <div class="col-12">
          <h4>Ingredients</h4>
          <ul class="list-group list-group-flush">
            <% recipe.ingredients.forEach(function(ingredients, index){ %>
              <li class="list-group-item"><%= ingredients %></li>
            <% }) %>
          </ul> 
        </div>
      </div>
    </div>
  </div>
  <div class="col-md-7">
    <!-- Listen Button -->
    <button type="button" class="btn btn-primary btn-lg btn-block col-lg-4 mb-3">Listen</button>
    
    <!-- Previous and Next Buttons -->
    <div class="d-flex justify-content-between">
      <button type="button" class="btn btn-primary col-md-3 btn-block mr-2">Previous</button>
      <button type="button" class="btn btn-primary btn-block ml-2">Next</button>
    </div>
  </div>
</div>
<% } else { %>
  <p>No item found.</p>
<% } %>

script>
  if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {
    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    const synth = window.speechSynthesis;
    recognition.lang = 'en-US';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
    recognition.continuous = true; // Allow continuous recognition
    let ingredientIndex = 0;
    let lastIngredients = [];
    let instructionIndex = 0;
    let ingredients = [<% recipe.ingredients.forEach(ingredient => { %>'<%= ingredient %>',<% }) %>];
    let instructions = [<% recipe.instructions.forEach(instruction => { %>'<%= instruction %>',<% }) %>];
    let readingIngredients = false;
    let readingInstructions = false;
    let timeoutID;
  
    function readNextIngredients() {
      const endIndex = Math.min(ingredientIndex + 3, ingredients.length);
      lastIngredients = [];
      for (let i = ingredientIndex; i < endIndex; i++) {
        const utterance = new SpeechSynthesisUtterance(ingredients[i]);
        utterance.rate = 0.8;
        synth.speak(utterance);
        lastIngredients.push(ingredients[i]);
      }
      ingredientIndex = endIndex;
      if (ingredientIndex < ingredients.length) {
        waitCommandForIngredients();
      } else {
        readingIngredients = false;
        readNextInstruction();
      }
    }
  
    function readNextInstruction() {
      if (instructionIndex < instructions.length) {
        const utterance = new SpeechSynthesisUtterance(instructions[instructionIndex]);
        utterance.rate = 0.8;
        synth.speak(utterance);
        instructionIndex++;
        waitCommandForInstruction();
      } else {
        readingInstructions = false;
        instructionIndex = 0;
        document.getElementById('output').innerText = "End of instructions.";
      }
    }
  
    function waitCommandForIngredients() {
      recognition.start();
      timeoutID = setTimeout(() => {
        synth.cancel();
        recognition.stop();
        readNextIngredients();
      }, 60000); // 1 minute timeout
    }
  
    function waitCommandForInstruction() {
      recognition.start();
      timeoutID = setTimeout(() => {
        synth.cancel();
        recognition.stop();
        readingInstructions = false;
        document.getElementById('output').innerText = "";
      }, 60000); // 1 minute timeout
    }
  
    recognition.onresult = function(event) {
      const transcript = event.results[event.results.length - 1][0].transcript.toLowerCase();
      document.getElementById('output').innerText = "You said: " + transcript;
      if (readingIngredients) {
        if (transcript === 'next') {
          readNextIngredients();
        } else if (transcript === 'previous') {
          repeatLastIngredients();
        }
      } else if (readingInstructions) {
        if (transcript === 'next') {
          readNextInstruction();
        }
      }
    };
  
    recognition.onerror = function(event) {
      console.error('Speech recognition error:', event.error);
    };
  
    function repeatLastIngredients() {
      if (lastIngredients.length > 0) {
        const utterances = lastIngredients.map(ingredient => {
          const utterance = new SpeechSynthesisUtterance(ingredient);
          utterance.rate = 0.8;
          return utterance;
        });
        utterances.forEach(utterance => {
          synth.speak(utterance);
        });
      } else {
        if (ingredientIndex > 0) {
          ingredientIndex -= 3;
          readNextIngredients();
        } else {
          readNextInstructions();
        }
      }
    }
  
    document.getElementById('startBtn').addEventListener('click', function() {
      if (!readingIngredients) {
        readNextIngredients();
        readingIngredients = true;
        document.getElementById('output').innerText = "Listening for ingredients...";
      } else if (!readingInstructions) {
        readNextInstruction();
        readingInstructions = true;
        document.getElementById('output').innerText = "Listening for instructions...";
      }
    });
  
    recognition.onstart = function() {
      document.getElementById('output').innerText = "Listening...";
    };
  
    recognition.onend = function() {
      if (readingIngredients || readingInstructions) {
        recognition.start();
      } else {
        document.getElementById('output').innerText = "";
      }
    };
  } else {
    document.getElementById('output').innerText = "Sorry, your browser doesn't support speech recognition.";
  }
  </script>
  